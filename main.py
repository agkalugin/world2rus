import os
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 1418276861  

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞
class OrderStates(StatesGroup):
    waiting_for_link = State()
    waiting_for_screenshot = State()
    waiting_for_telegram_id = State()
    waiting_for_phone = State()

# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add("üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –≤—ã–∫—É–ø")
main_menu.add("üí≤ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫—É—Ä—Å –≤—ã–∫—É–ø–∞")
main_menu.add("üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏")
main_menu.add("üõç –ù–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç —Å –¶–ë –†–§
def get_currency_rates():
    url = "https://www.cbr-xml-daily.ru/daily_json.js"
    try:
        response = requests.get(url).json()
        usd = round(response['Valute']['USD']['Value'] * 1.07, 2)
        eur = round(response['Valute']['EUR']['Value'] * 1.07, 2)
        return usd, eur
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}")
        return None, None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –≤—ã–∫—É–ø"
@dp.message_handler(lambda message: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑" in message.text)
async def send_order(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
    await OrderStates.waiting_for_link.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí≤ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫—É—Ä—Å –≤—ã–∫—É–ø–∞"
@dp.message_handler(lambda message: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫—É—Ä—Å" in message.text)
async def get_exchange_rate(message: types.Message):
    usd, eur = get_currency_rates()
    if usd and eur:
        await message.answer(
            f"üí∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤—ã–∫—É–ø–∞:*\n"
            f"üá∫üá∏ –î–æ–ª–ª–∞—Ä: {usd}‚ÇΩ\n"
            f"üá™üá∫ –ï–≤—Ä–æ: {eur}‚ÇΩ",
            parse_mode="Markdown"
        )
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"
@dp.message_handler(lambda message: "–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏" in message.text)
async def send_shipping_info(message: types.Message):
    text = (
        "üöõ *–î–æ—Å—Ç–∞–≤–∫–∞:*\n"
        "–ì—Ä—É–∑—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∏–∑ –°–®–ê –∏ –ï–≤—Ä–æ–ø—ã –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä—Ç–∏—è–º–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑ –≤ 7-10 –¥–Ω–µ–π. "
        "–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≤–∞—Ä–æ–≤, –º–æ–≥—É—Ç –µ—Ö–∞—Ç—å —Ä–∞–∑–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏, —á–µ—Ä–µ–∑ —Ç—Ä–µ—Ç—å–∏ —Å—Ç—Ä–∞–Ω—ã –∏ –¥—Ä—É–≥–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏. "
        "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –≤—Å–µ –ø–æ—à–ª–∏–Ω—ã –º—ã –ø–ª–∞—Ç–∏–º —Å–∞–º–∏ –∏ –æ–Ω–∏ —É–∂–µ –≤—Ö–æ–¥—è—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –¥–µ–ª—å—Ç—É —Ü–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏. –í–µ—Å –º—ã –Ω–µ –æ–∫—Ä—É–≥–ª—è–µ–º.\n\n"
        "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:*\n"
        "üá∫üá∏ –°–®–ê  ‚Äî 2200-2500‚ÇΩ –∑–∞ 1 –∫–≥ –≥—Ä—É–∑–∞\n"
        "üá™üá∫ –ï–≤—Ä–æ–ø–∞ ‚Äî 1800-2000‚ÇΩ –∑–∞ 1 –∫–≥ –≥—Ä—É–∑–∞\n"
        "üáÆüáπ –ò—Ç–∞–ª–∏—è ‚Äî 2000-2200‚ÇΩ –∑–∞ 1 –∫–≥ –≥—Ä—É–∑–∞\n"
        "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è ‚Äî 2200-2400‚ÇΩ –∑–∞ 1 –∫–≥ –≥—Ä—É–∑–∞\n\n"
        "‚è≥ –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω ‚Äî 35-40 –¥–Ω–µ–π.\n\n"
        "üí≥ *–û–ø–ª–∞—Ç–∞:*\n"
        "- –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (–≤—ã–∫—É–ø) –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤—ã–∫—É–ø–æ–º.\n"
        "- –ö–æ–º–∏—Å—Å–∏—è (5-15% –æ—Ç —Ü–µ–Ω—ã) –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞.\n"
        "- –¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –°–ü–±, –∏—Å—Ö–æ–¥—è –∏–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—Å–∞."
    )
    await message.answer(text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üõç –ù–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º"
@dp.message_handler(lambda message: "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º" in message.text)
async def send_store_recommendations(message: types.Message):
    text = (
        "üõí *–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã:*\n\n"
        "üá∫üá∏ *–°–®–ê:*\n"
        "- [Amazon](https://www.amazon.com/)\n"
        "- [eBay](https://www.ebay.com/)\n"
        "- [6pm](https://www.6pm.com/)\n"
        "- [Nike](https://www.nike.com/ru/)\n\n"
        "üá™üá∫ *–ï–≤—Ä–æ–ø–∞:*\n"
        "- [Zalando](https://www.zalando.de/)\n"
        "- [ASOS](https://www.asos.com/ru/)\n"
        "- [Adidas](https://www.adidas.de/)\n\n"
        "üá¨üáß *–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è:*\n"
        "- [Farfetch](https://www.farfetch.com/ru/)\n"
        "- [End Clothing](https://www.endclothing.com/)\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞–≥–∞–∑–∏–Ω—É –∏–ª–∏ —Ç–æ–≤–∞—Ä—É, –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
    )
    await message.answer(text, parse_mode="Markdown")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)