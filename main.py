import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 1418276861  

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞
class OrderStates(StatesGroup):
    waiting_for_link = State()
    waiting_for_screenshot = State()
    waiting_for_telegram_id = State()
    waiting_for_phone = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
    await OrderStates.waiting_for_link.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä
@dp.message_handler(state=OrderStates.waiting_for_link)
async def process_link(message: types.Message, state: FSMContext):
    if 'http' not in message.text.lower():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é 'http'.")
        return
    await state.update_data(link=message.text.strip())
    await OrderStates.waiting_for_screenshot.set()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∏–¥–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç, —Ü–µ–Ω–∞).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
@dp.message_handler(content_types=types.ContentType.PHOTO, state=OrderStates.waiting_for_screenshot)
async def process_screenshot(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    await state.update_data(screenshot_file_id=photo.file_id)

    # –ó–∞–ø—Ä–æ—Å–∏—Ç—å ID –≤ Telegram
    await OrderStates.waiting_for_telegram_id.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –≤ Telegram –∏–ª–∏ username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID Telegram
@dp.message_handler(state=OrderStates.waiting_for_telegram_id)
async def process_telegram_id(message: types.Message, state: FSMContext):
    await state.update_data(telegram_id=message.text.strip())

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))

    await OrderStates.waiting_for_phone.set()
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(content_types=types.ContentType.CONTACT, state=OrderStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone=phone_number)

    data = await state.get_data()
    link = data.get('link')
    telegram_id = data.get('telegram_id')
    screenshot_file_id = data.get('screenshot_file_id')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    order_info = (
        f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑*\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (ID: {message.from_user.id})\n"
        f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
        f"üì¨ Telegram ID: {telegram_id}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
        f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∏–∂–µ."
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å —Ñ–æ—Ç–æ
        await bot.send_photo(chat_id=ADMIN_ID, photo=screenshot_file_id, caption=order_info, parse_mode="Markdown")
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–Ω–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: %s", e)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=types.ReplyKeyboardRemove())

    await state.finish()

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
@dp.message_handler(lambda message: message.content_type != 'photo', state=OrderStates.waiting_for_screenshot)
async def invalid_screenshot(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É–≤–∏–¥–µ—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–≤–∞—Ä–∞.")

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(lambda message: message.content_type != 'contact', state=OrderStates.waiting_for_phone)
async def invalid_phone(message: types.Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)